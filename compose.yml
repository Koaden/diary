services:
  base-php:
    &base-php
    platform: linux/x86_64
    env_file: .env
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    command: [ "true" ]

  composer-install:
    <<: *base-php
    volumes:
      - ./apps:/usr/src/app
    command: [ "php-fpm" ]
    profiles: [ "composer" ]

  php:
    <<: *base-php
    volumes:
      - './apps/back:/usr/src/app'
      - '.env:/usr/src/app/.env'
    restart: unless-stopped
    command: [ "php-fpm" ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

  api:
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./apps/back/public:/usr/src/app/public:ro
    depends_on:
      - php
    restart: unless-stopped
    networks:
      - backend
      - frontend

  db:
    image: mongo:7
    restart: unless-stopped
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - db:/data/db
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  mongo-express:
    image: mongo-express:1.0.2
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=db
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - db
    networks:
      - backend

  react:
    build:
        context: ./apps/front
        dockerfile: ../../docker/react/Dockerfile
    working_dir: /app
    volumes:
      - ./apps/front:/app
      - react_build:/app/dist
    environment:
      - REACT_APP_API_URL=http://nginx/api
    depends_on:
      - api
    networks:
      - frontend

  front:
    image: nginx:alpine
    container_name: react_server
    ports:
      - "3000:80"
    volumes:
      - react_build:/usr/share/nginx/html:ro
    depends_on:
      - react
    restart: unless-stopped
    networks:
      - frontend

volumes:
  db:
  react_build:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
